// Указываем версию солидити для компилятора
pragma solidity ^0.4.11;


//Объявляем контракт
contract myFirstDapp {


    // Объявляем переменную donator, в которой будет содержаться значение типа Адрес
	// Public означает, что значение этой переменной будет видно всем

    address public donator;



    // Эта функция выполнится в момент инициализации контракта
    function myFirstDapp() {
        // Присваиваем функции donator значение адреса того, кто отправил эфиры
        donator = msg.sender;
    }



    // Функция для приема эфиров
	// Отсутвие названия говорит о том, что эта функция будет вызвана в момент,
	// когда на адрес контракта переводятся деньги
	// payable - модификатор который означает, что вместе с вызовом функции могут передаваться эфиры
	function () payable {
		// Присваиваем функции donator значение адреса того, кто отправил эфиры
		donator = msg.sender;
	}


    // Функция для установки нового donator
    // internal означает, что эта функция недоступна для вызова вне контракта
    // (address _donator) означает, что функция принимает значение типа адрес, которое потом будет
    // доступно по имени _donator
    function setDonator(address _donator) internal {
        // Присваиваем функции donator значение адреса, находящегося в переменной donator
        donator = _donator;
    }
}

contract myFirstComplexDapp is myFirstDapp {

    //Функция которая принимает эфиры вместе с установкой нового donator
    function setRealDonator(address _realDonator) payable {
        //Проверяем, что количество эфиров, переведенное на контракт, больше, чем 1 эфир
        // msg.value - количество эфиров, переведнных вместе с выполнением функции
        if (msg.value > 1 * 1 ether){
            //вызываем внутреннюю функцию setDonator, которой передаем значение переменной _realDonator
            setDonator(_realDonator);
        }
    }
}
